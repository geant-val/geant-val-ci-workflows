name: configure-build-run
on: 
  workflow_dispatch:
    inputs:
      repository:
        description: 'The repository to checkout'
        required: false
        type: string
      commit_back:
        type: boolean
        description: 'Commit README and summary file back to repo (needed by dashboard repo)'
        required: false
        default: false
  workflow_call:
    inputs:
      repository:
        description: 'The repository to checkout'
        required: false
        type: string
      commit_back:
        type: boolean
        description: 'Commit README and summary file back to repo (needed by dashboard repo)'
        required: false
        default: false

jobs:

  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix_json: ${{ steps.set-matrix.outputs.matrix_json }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: ${{ inputs.repository || github.repository }}
          submodules: 'recursive'
      - id: set-matrix
        run: |
          PROJECT_DIRS=$(ls -d */ | sed 's/\///g')  # Assuming each directory is a project
          MATRIX=()

          CONFIGURATIONS=(
             '{"geant4_version":"11.1.p02", "platform":"centos7", "gcc_version":"10"}'
             '{"geant4_version":"10.7.p03", "platform":"centos7", "gcc_version":"10"}'
             '{"geant4_version":"11.1.ref10", "platform":"centos8", "gcc_version":"10"}')

          add_to_matrix() {
            local project_dir="$1"
            for config in "${CONFIGURATIONS[@]}"; do
               MATRIX+=("{\"project_dir\":\"$project_dir\", ${config:1:-1}}")
            done
          }

          # Check for CMakeLists.txt in the current directory
          [[ -f "CMakeLists.txt" ]] && add_to_matrix ""

          # Loop over project directories and check for CMakeLists.txt
          for DIR in $PROJECT_DIRS; do
              if [[ -f "$DIR/CMakeLists.txt" ]] || [[ -n $(find "$DIR" -maxdepth 1 -type f -name "CMakeLists.txt") ]]; then
                 add_to_matrix "$DIR"
              fi
          done


          # Convert array to JSON string
          MATRIX_JSON=$(printf '%s\n' "${MATRIX[@]}" | jq -s '{include: .}')

          # Print the matrix
          echo "Matrix JSON: $MATRIX_JSON"

          # Set the output for GitHub Actions
          {
            echo "matrix_json<<EOF"
            echo "$MATRIX_JSON"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  build-and-test:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false  # This prevents other jobs from being canceled if one fails
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix_json)}}
#      matrix:
#        include:
#          - geant4_version: "11.1.p02"
#            platform: "centos7" 
#            gcc_version: "10" 
#          - geant4_version: "10.7.p03"
#            platform: "centos7"
#            gcc_version: "10"
#          - geant4_version: "11.1.ref10"
#            platform: "centos8"
#            gcc_version: "10"
       
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: ${{ inputs.repository || github.repository }}
          submodules: 'recursive'
      - uses: cvmfs-contrib/github-action-cvmfs@v3
      - name: Use Matrix JSON
        run: |
          echo "${{needs.prepare-matrix.outputs.matrix_json}}"
      - name: Start container
        run: |
          CONTAINER_NAME=my-container-${{ github.run_id }}-${{ github.run_number }}
          docker run -id --name $CONTAINER_NAME \
            --volume "${{ github.workspace }}:/workspace" \
            --volume /cvmfs:/cvmfs:shared \
            --workdir /workspace \
            ghcr.io/aidasoft/${{ matrix.platform }}:latest /bin/bash
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
      - name: Create setup scripts and copy them inside the container
        run: |
          cat << 'EOF' > setenv.sh
          #!/bin/bash
          set -e
          set -o pipefail
          export PATH=/cvmfs/sft.cern.ch/lcg/contrib/CMake/3.26.2/Linux-x86_64/bin/:${PATH}
          source /cvmfs/geant4.cern.ch/geant4/${{ matrix.geant4_version }}/x86_64-${{ matrix.platform }}-gcc${{ matrix.gcc_version }}-optdeb/bin/geant4.sh
          source /cvmfs/sft.cern.ch/lcg/contrib/gcc/${{ matrix.gcc_version }}/x86_64-${{ matrix.platform }}/setup.sh
          echo "Environment setup complete!"
          EOF

          cat << 'EOF' > configure.sh
          #!/bin/bash
          set -e
          set -o pipefail
          source /workspace/setenv.sh
          mkdir -p build logs install
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ../${{ matrix.project_dir }}/ 2>&1 | tee /workspace/logs/${{ matrix.project_dir }}-stderr-configure-${{ matrix.geant4_version }}.log
          if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "CMake configuration failed!"
              exit 1
          fi
          echo "CMake configuration complete!"
          EOF

          cat << 'EOF' > build.sh
          #!/bin/bash
          set -e  # Stop on first error
          set -o pipefail  # Ensure failures propagate correctly
          
          # Load environment variables
          source /workspace/setenv.sh
          
          # Navigate to the build directory
          cd /workspace/build || { echo "Build directory not found!"; exit 1; }
          
          # Run the build process
          make install 2>&1 | tee /workspace/logs/${PROJECT_DIR}-stderr-build-${GEANT4_VERSION}.log
          
          # Ensure `make install` succeeded
          if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "Build failed!"
              exit 1
          fi
          echo "Build completed successfully!"
          EOF

          cat << 'EOF' > run_tests.sh
          #!/bin/bash
          set -e  # Stop on error
          set -o pipefail  # Ensure failures propagate correctly
          
          # Load the environment
          source /workspace/setenv.sh
          
          # Navigate to the build directory
          cd /workspace/build || { echo "Build directory not found!"; exit 1; }
          
          # Find executable in build directory
          EXECUTABLE=$(find . -maxdepth 1 -type f -executable -exec file -i '{}' \; | grep 'x-executable; charset=binary' | cut -d ':' -f 1 | sed 's|^\./||')
          
          # If no executable is found, fail
          if [[ -z "$EXECUTABLE" ]]; then
              echo "No executable found in build directory!"
              exit 1
          fi
          
          # Store the executable name for later use
          echo "EXECUTABLE=$EXECUTABLE" >> /workspace/env_vars.sh
          
          # Run the executable
          echo "Running test: $EXECUTABLE"
          ./"$EXECUTABLE" 2>&1 | tee /workspace/logs/${PROJECT_DIR}-stderr-run-${GEANT4_VERSION}.log
          EOF

          # Copy to container
          docker cp setenv.sh "$CONTAINER_NAME:/workspace/setenv.sh"
          docker cp configure.sh "$CONTAINER_NAME:/workspace/configure.sh"
          docker cp build.sh "$CONTAINER_NAME:/workspace/build.sh"
          docker cp build.sh "$CONTAINER_NAME:/workspace/run_tests.sh"

          # Make scripts executable
          docker exec "$CONTAINER_NAME" chmod +x /workspace/setenv.sh
          docker exec "$CONTAINER_NAME" chmod +x /workspace/configure.sh
          docker exec "$CONTAINER_NAME" chmod +x /workspace/build.sh
          docker exec "$CONTAINER_NAME" chmod +x /workspace/run_tests.sh

      - name: Load environment inside the container
        run: |
          docker exec "$CONTAINER_NAME" /bin/bash -c "/workspace/setenv.sh"

      - name: Configure Geant4 Application
        id: configure-app
        run: |
          docker exec "$CONTAINER_NAME" /bin/bash -c "/workspace/configure.sh"

      - name: Build Geant4 Application
        id: build-app
        run: |
          docker exec "$CONTAINER_NAME" /bin/bash -c "/workspace/build.sh"
      - name: Run quick app tests.
        run: |
          docker exec $CONTAINER_NAME /bin/bash -c "set -o pipefail; \
          export PATH=/cvmfs/sft.cern.ch/lcg/contrib/CMake/3.26.2/Linux-x86_64/bin/:${PATH} && \
          source /cvmfs/geant4.cern.ch/geant4/${{ matrix.geant4_version }}/x86_64-${{ matrix.platform }}-gcc${{ matrix.gcc_version }}-optdeb/bin/geant4.sh && \
          source /cvmfs/sft.cern.ch/lcg/contrib/gcc/${{ matrix.gcc_version }}/x86_64-${{ matrix.platform }}/setup.sh && \
          cd build | \
          tee /workspace/logs/${{matrix.project_dir}}-stderr-run-${{ matrix.geant4_version }}.log"  
          executable=$(docker exec $CONTAINER_NAME /bin/bash -c "find . -maxdepth 1 -type f -executable -exec file -i '{}' \; | grep 'x-executable; charset=binary' | cut -d ':' -f 1 | sed 's|^\./||'") 
          echo "executable=${executable}" >> $GITHUB_ENV
          echo "executable=${executable}"
      - name: Find and set executable
        run: |
          executable=$(docker exec $CONTAINER_NAME /bin/bash -c "find build -maxdepth 1 -type f -executable -exec file -i '{}' \; | grep 'x-executable; charset=binary' | cut -d ':' -f 1 | sed 's|^build/||'")
          echo "executable=${executable}" >> $GITHUB_ENV
      - name: Upload failure log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.project_dir}}-logfiles-${{ matrix.geant4_version }}.log
          path: logs/*.log
      - name: Generate YAML file
        if: always() && inputs.commit_back
        run: |
          echo "  - name: \"${{ matrix.project_dir }}\"" >> results.yaml
          echo "    geant4_versions:" >> results.yaml
          echo "      - version: \"${{ matrix.geant4_version }}\"" >> results.yaml
          echo "        compilers:" >> results.yaml
          echo "          - compiler_version: \"${{ matrix.gcc_version }}\"" >> results.yaml
          echo "            results:" >> results.yaml
          echo "              configure: \"${{ steps.configure-app.outcome }}\"" >> results.yaml
          echo "              build: \"${{ steps.build-app.outcome }}\"" >> results.yaml
          echo "              executable: \"${executable}\"" >> results.yaml
          cp results.yaml ${{matrix.project_dir}}-${{ matrix.geant4_version }}-results.yaml
      - name: Check content of YAML file
        if: always() && inputs.commit_back
        run: |
          cat results.yaml
      - name: Upload result file
        if: always() && inputs.commit_back
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.project_dir}}-${{ matrix.geant4_version }}-results.yaml
          path: ${{matrix.project_dir}}-${{ matrix.geant4_version }}-results.yaml    

  collect-results:
    if: always() && inputs.commit_back
    needs: build-and-test
    runs-on: ubuntu-latest
         
    steps: 
      - uses: actions/checkout@v4
        with:
          token:  ${{ secrets.GITHUB_TOKEN }}    
      - uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R
      - name: Display Current Directory
        run: pwd
      - run: |   
          pwd
          ls -la  
          echo "tests:" > results_ci.yaml
          cat *-results.yaml/*results*.yaml >> results_ci.yaml
          python3 run-yaml.py > results.MD
          python3 run-yaml-fancy.py
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add results_ci.yaml results.MD output.md
          git commit -m "Add new CI results in YAML format and MD file" results_ci.yaml results.MD output.md
          git push  
          
#      - uses: EndBug/add-and-commit@v9
#        with:
#          message: 'Add the very useful text file'
#          add: 'TestEm3-logfiles-10.7.p03.log/TestEm3-stderr-build-10.7.p03.log --force'


    
